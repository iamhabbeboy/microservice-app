version:  '3'
services:
  frontend-service:
    build: 
      context: ./frontend-service
      dockerfile: frontend-service.dockerfile
    ports:
      - "80:8080"
    networks:
      - app-network
  logger-service:
    build: 
      context: ./logger-service
      dockerfile: logger-service.dockerfile
  listener-service:
    build: 
      context: ./listener-service
      dockerfile: listener-service.dockerfile
  broker-service:
    build: 
      context: ./broker-service
      dockerfile: broker-service.dockerfile
    ports:
      - "8083:1323"
    networks:
      - app-network
  php:
    build:
      context: ./auth-service
      dockerfile: auth-service.dockerfile
    volumes:
      - ./auth-service:/var/www
    ports:
      - "9000:9000"
    networks:
      - app-network
  auth-service:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - ./auth-service:/var/www
      - ./auth-service/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - app-network
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:3.2'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data1/mongo/:/data/db

networks:
  app-network: